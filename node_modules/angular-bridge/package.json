{
  "name": "angular-bridge",
  "author": {
    "name": "Alexandre Strzelewicz"
  },
  "description": "Mongoose Express Angular resources bridge",
  "version": "0.3.2",
  "main": "./index.js",
  "private": false,
  "dependencies": {
    "underscore": "1.x"
  },
  "repository": {
    "type": "git",
    "url": "git://github.com/Alexandre-Strzelewicz/angular-bridge.git"
  },
  "devDependencies": {
    "mocha": "*",
    "should": "*"
  },
  "homepage": "https://github.com/Alexandre-Strzelewicz/angular-bridge",
  "readmeFilename": "README.md",
  "_npmUser": {
    "name": "tknew",
    "email": "strzelewicz.alexandre@gmail.com"
  },
  "engines": {
    "node": "*"
  },
  "readme": "# Angular Bridge\n\nIt's a bridge for resources (REST schema) between front-end and back-end when you are using :\n\n- Mongoose for the models\n- Express for the routing\n- AngularJS as the front-end framework\n\n## Sample code\n\ndb.js \n\n```javascript\nvar mongoose = require('mongoose');\nvar db = mongoose.connect('mongodb://localhost/brabra');\nvar Schema = mongoose.Schema, ObjectId = Schema.ObjectId;\n\nvar PizzaSchema = new Schema({\n    author : {\n\ttype : String,\n    },\n    color : {\n\ttype : String\n    },\n    size : {\n        type : Number\n    },  \n    password : {   // You can hide it from read and write ! (check after)\n        type : String \n    }\n});\n\n// You can optionally add a method to schema.methods that is executed based\n// on the type of HTTP request with the names \"query\", \"get\", \"put\", \"post\", and \"delete\"\nPizzaSchema.methods.query = function() {\n  console.log(\"Queried.\");\n};\nPizzaSchema.methods.get = function() {\n  console.log(\"Got.\")\n}\nPizzaSchema.methods.put = function() {\n  console.log(\"Put.\")\n}\nPizzaSchema.methods.post = function() {\n  console.log(\"Posted.\")\n}\nPizzaSchema.methods.delete = function() {\n  console.log(\"Deleted.\")\n}\n\nexports.Pizza = mongoose.model('pizzas', PizzaSchema);\n```\n\nadd in app.js :\n\n```javascript\nvar db = require('./db.js');\n\nvar angularBridge = new (require('angular-bridge'))(app, {\n    urlPrefix : '/api/'\n});\n\nangularBridge.addResource('pizzas', db.Pizza);\n\n// You can hide fields...\nangularBridge.addResource('toppings', db.Toppings, { hide : ['_id', 'password']});\n\n// You can specify read-only fields... (sent to client, but will not write to database)\nangularBridge.addResource('jaboodies', db.Jaboody, { readOnly: ['_id', 'cantChangeMe']});\n\n// You can force a mongoose query... (to restrict access to certain items only)\nangularBridge.addResource('projects', db.Project, { query: '{_user: String(req.user._id)}'});\n// Note:  This can be passed as an object, but you can also pass it as a string\n//        in cases where the object you're looking for is only accessible within\n//        the HTTP-verb callback (in this example, 'req' will give an error if it\n//        is not passed as a string)\n\n// You can force a particular value regardless of what the client sends...\nangularBridge.addResource('clients', db.Client, { force: {_user: 'req.user._id' }});\n```\n### BE CAREFUL!  `force` AND `query` BOTH USE `eval()`\n\n\nThat's all for the backend, now in Angular :\n\n```javascript\nvar HomeCtrl = function($scope, $routeParams, $location, $resource) {\n    var PizzaDb = $resource('/api/pizzas/:id', { id: '@_id' }); \n   \n   // Magic, you are ready now !\n   \n   var new_pizza = new PizzaDb({\n     author : 'agoodpizayolo',\n     color : 'blue',\n     size : 999\n   });\n   \n   new_pizza.$save(function(save_the_pizza) {\n      console.log('Success pizza - ', save_the_pizza);\n   });\n   \n   PizzaDb.get({id : '50b40dd6ed3f055a27000001'}, function(pizza) {\n    \tpizza.color = 'UV';\n    \tpizza.$save();\n    });\n};\n```\n",
  "_id": "angular-bridge@0.3.2",
  "dist": {
    "shasum": "494742e212110183b122ce1204a79dbe1f1d23ae"
  },
  "_from": "angular-bridge"
}
